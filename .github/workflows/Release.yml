name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Manual version override (e.g., 1.0.1). Leave empty for automatic increment.'
        required: false
        default: ''
  push:
    branches:
      - main
      - master
      - wheel_testing

permissions:
  contents: write
  issues: read

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.commit-message-check.outputs.should-run }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Ensure using GITHUB_TOKEN for authentication
          fetch-depth: 0 # Necessary for tags creation and push
      - name: Check Commit Message
        id: commit-message-check
        run: |
          COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.event.after }})
          echo "Commit message: $COMMIT_MESSAGE"
          if [[ "$COMMIT_MESSAGE" == *"[Trigger-Release]"* ]]; then
            echo "::set-output name=should-run::true"
          else
            echo "::set-output name=should-run::false"
          fi

  linux:
    runs-on: ubuntu-latest
    needs: check-commit-message
    if: ${{ needs.check-commit-message.outputs.should-run == 'true' }}
    strategy:
      matrix:
        target: [ x86_64, x86, aarch64, armv7, s390x, ppc64le ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    needs: check-commit-message
    if: ${{ needs.check-commit-message.outputs.should-run == 'true' }}
    strategy:
      matrix:
        target: [ x64, x86 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    needs: check-commit-message
    if: ${{ needs.check-commit-message.outputs.should-run == 'true' }}
    strategy:
      matrix:
        target: [ x86_64, aarch64 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: check-commit-message
    if: ${{ needs.check-commit-message.outputs.should-run == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    #    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ linux, windows, macos, sdist ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing *